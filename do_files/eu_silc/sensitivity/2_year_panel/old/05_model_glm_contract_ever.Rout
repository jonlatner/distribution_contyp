
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Top commands --------------------------------------------------------------
> 
> # https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
> detachAllPackages <- function() {
+   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+   package.list <- setdiff(package.list,basic.packages)
+   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
+   
+ }
> detachAllPackages()
> rm(list=ls(all=TRUE))
> 
> # FOLDERS
> setwd("/Users/jonathanlatner/Google Drive/")
> # setwd("C:/Users/ba1ks6/Google Drive/")
> 
> data_files = "SECCOPA/projects/distribution_contyp/data_files/eu_silc/2_year_panel/"
> results = "SECCOPA/projects/distribution_contyp/results/2_year_panel/"
> 
> # LIBRARY
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(car)
Loading required package: carData

Attaching package: ‘car’

The following object is masked from ‘package:dplyr’:

    recode

> library(margins)
> library(beepr)
> library(stargazer)

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 

> library(ggplot2)
> library(beepr)
> library(forcats) #fct_reorder
> library(stringr) #str_detect
> library(broom) # tidy
> library(prediction)
> library(survey)
Loading required package: grid
Loading required package: Matrix
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

> library(pscl) # mcfadden
Classes and Methods for R developed in the
Political Science Computational Laboratory
Department of Political Science
Stanford University
Simon Jackman
hurdle and zeroinfl functions by Achim Zeileis
> library(pROC) # area under the curve (AUC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> 
> options(scipen=999)
> 
> # McFadden's R2
> # https://stats.stackexchange.com/questions/82105/mcfaddens-pseudo-r2-interpretation
> 
> # AUC
> # https://pdfs.semanticscholar.org/5c2f/4494f7ff8b93433f3432a4ce271586f6d56f.pdf
> # http://gim.unmc.edu/dxtests/roc3.htm
> 
> # Load data --------------------------------------------------------------
> 
> df_eu_silc <- readRDS(file = paste0(data_files,"df_eu_silc_clean_xc.rds"))
> table(df_eu_silc$panel)

 2008  2009  2010  2011  2012  2013  2014  2015  2016  2017  2018  2019 
75539 75978 74834 76789 81270 77582 81942 82149 84031 87620 95981 81345 
> t <- table(df_eu_silc$country)
> 
> # df_eu_silc <- df_eu_silc %>%
> #   filter(panel>2007)
> 
> # Clean data  -----------------------------------------
> 
> df_eu_silc <- within(df_eu_silc, edu_cat <- relevel(edu_cat, ref = "2"))
> df_eu_silc <- within(df_eu_silc, age_cat <- relevel(age_cat, ref = "2"))
> 
> df_eu_silc <- df_eu_silc %>%
+   mutate(ftc_c_0=ftc_ever_c)
> 
> df_eu_silc <- df_eu_silc %>%
+   select(country_name, panel, year, edu_cat, male, age_cat, matches("ftc_c"), weight_long_2) %>%
+   rename(country=country_name)
> 
> df_eu_silc <- droplevels(df_eu_silc)
> 
> country <- c("Germany", "Switzerland", "Luxembourg", "Belgium", "Austria", "Netherlands", "France", 
+              "United Kingdom", "Ireland", 
+              "Malta", "Greece", "Italy", "Cyprus", "Portugal", "Spain", 
+              "Romania", "Poland", "Croatia", "Hungary", "Czechia", "Bulgaria", "Slovenia", "Slovakia", "Lithuania", "Estonia", "Latvia", "Serbia", "Turkey",
+              "Sweden", "Denmark", "Norway", "Finland", "Iceland")
> country_code <- c("DE", "CH", "LU", "BE", "AT", "NL", "FR", 
+                   "GB", "IE", 
+                   "MT", "GR", "IT", "CY", "PT", "ES", 
+                   "RO", "PL", "HR", "HU", "CZ", "BG", "SI", "SK", "LT", "EE", "LV", "RS", "TK",
+                   "SE", "DK", "NO", "FI", "IS")
> region <- c("Continental", "Continental", "Continental", "Continental", "Continental", "Continental", "Continental", 
+             "Anglophone", "Anglophone", 
+             "Southern", "Southern", "Southern", "Southern", "Southern", "Southern", 
+             "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern", "Eastern",
+             "Nordic", "Nordic", "Nordic", "Nordic", "Nordic")
> 
> geography <- cbind(country, country_code, region)
> 
> df_eu_silc <- merge(df_eu_silc,geography)
> 
> rm(country, country_code, region)
> 
> table(df_eu_silc$country, useNA = "ifany")

       Austria        Belgium       Bulgaria        Croatia         Cyprus 
         29654          29571          31134          24500          25821 
       Czechia        Denmark        Estonia        Finland         France 
         46266           8152          30192          21259          63703 
       Germany         Greece        Hungary        Iceland        Ireland 
          8016          36029          43971           5887          12876 
         Italy         Latvia      Lithuania     Luxembourg          Malta 
         81439          27384          25241          28754          18209 
   Netherlands         Norway         Poland       Portugal        Romania 
         30040           3840          62971          41274          35536 
        Serbia       Slovakia       Slovenia          Spain         Sweden 
         14666          34371          34005          65019          15184 
   Switzerland United Kingdom 
         13835          26261 
> table(df_eu_silc$region, useNA = "ifany")

 Anglophone Continental     Eastern      Nordic    Southern 
      39137      203573      410237       54322      267791 
> 
> # Sample --------------------------------------------------------------
> set.seed(1234)
> 
> n <- c(0)
> 
> # LPM --------------------------------------------------------------
> 
> # EU
> df_table_eu = data.frame() # output
> df_yhat_eu = data.frame() # predict
> df_mfx_eu = data.frame() # mfx
> df_model_fit_eu <- data.frame(auc= numeric(0), psuedo_r2= integer(0))
> panel <- unique(df_eu_silc$panel)
> for(p in panel) {
+   df_panel <- filter(df_eu_silc, panel == p)
+   
+   df_new_data_yhat <- data.frame(
+     unique(
+       data.frame(
+         male = "0",
+         age_cat = "2",
+         edu_cat = "2")), 
+     row.names = NULL)
+   
+   my_svy <- svydesign(data = df_panel, 
+                       ids = ~1, # no clusters 
+                       weights =~ weight_long_2)
+   beta <- svyglm(ftc_c_0 ~ male + age_cat + edu_cat, my_svy, family = "binomial")
+   
+   # model fit
+   # psuedo_r2 = pR2(beta)["McFadden"]
+   # df_panel$yhat <- predict(beta,type="response")
+   # auc <- roc(df_panel$ftc_c_0, df_panel$yhat)$auc
+   # model_fit <- data.frame(cbind(auc,psuedo_r2))
+   # rownames(model_fit) <- NULL
+   # model_fit$num <- n
+   # model_fit$geography <- "EU-SILC"
+   # model_fit$panel <- p
+   # df_model_fit_eu <- rbind(df_model_fit_eu,model_fit)
+   # rm(auc,psuedo_r2,model_fit)
+   
+   # summary table
+   table <- tidy(beta)
+   table$num <- n
+   table$geography <- "EU-SILC"
+   table$panel <- p
+   df_table_eu <- rbind(df_table_eu,table)
+   
+   # predict - country level change
+   yhat <- prediction(beta, data = df_new_data_yhat, calculate_se = TRUE)
+   yhat <- yhat %>%
+     select(fitted, se.fitted) %>%
+     rename(fit = fitted) %>%
+     mutate(lwr = fit - 1.96*se.fitted,
+            upr = fit + 1.96*se.fitted) %>%
+     select(-se.fitted)
+   yhat <- cbind(df_new_data_yhat,yhat)
+   yhat$num <- n
+   yhat$panel <- p
+   yhat$geography <- "EU-SILC"
+   yhat
+   
+   df_yhat_eu <- rbind(df_yhat_eu,yhat)
+   
+   # margins
+   mfx <- summary(margins(beta,
+                          design = my_svy
+   ))
+   mfx$num <- n
+   mfx$panel <- p
+   mfx$geography <- "EU-SILC"
+   df_mfx_eu <- rbind(df_mfx_eu,mfx)
+   print(p)
+ }
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
There were 12 warnings (use warnings() to see them)
> 
> rm(beta,table,yhat,mfx,df_panel,df_new_data_yhat,p,panel,df_panel,psuedo_r2,auc)
Warning messages:
1: In rm(beta, table, yhat, mfx, df_panel, df_new_data_yhat, p, panel,  :
  object 'df_panel' not found
2: In rm(beta, table, yhat, mfx, df_panel, df_new_data_yhat, p, panel,  :
  object 'psuedo_r2' not found
3: In rm(beta, table, yhat, mfx, df_panel, df_new_data_yhat, p, panel,  :
  object 'auc' not found
> 
> df_mfx_eu <- arrange(df_mfx_eu,factor,panel)
> 
> # Regions
> region <- unique(df_eu_silc$region)
> df_table_region = data.frame() # output
> df_yhat_region = data.frame() # predict
> df_mfx_region = data.frame() # mfx
> df_model_fit_region <- data.frame(auc= numeric(0), psuedo_r2= integer(0))
> for(r in region) {
+   df_region <- filter(df_eu_silc, region == r)
+   print(r)
+   
+   panel <- unique(df_region$panel)
+   for(p in panel) {
+     df_panel <- filter(df_region, panel == p)
+     print(p)
+     
+     df_new_data_yhat <- data.frame(
+       unique(
+         data.frame(
+           male = "0",
+           age_cat = "2",
+           edu_cat = "2")), 
+       row.names = NULL)
+     
+     my_svy <- svydesign(data = df_panel, 
+                         ids = ~1, # no clusters 
+                         weights =~ weight_long_2)
+     beta <- svyglm(ftc_c_0 ~ male + age_cat + edu_cat, my_svy, family = "binomial")
+     
+     # model fit
+     # psuedo_r2 = pR2(beta)["McFadden"]
+     # df_panel$yhat <- predict(beta,type="response")
+     # auc <- roc(df_panel$ftc_c_0, df_panel$yhat)$auc
+     # model_fit <- data.frame(cbind(auc,psuedo_r2))
+     # rownames(model_fit) <- NULL
+     # model_fit$num <- n
+     # model_fit$geography <- r
+     # model_fit$panel <- p
+     # df_model_fit_region <- rbind(df_model_fit_region,model_fit)
+     # rm(auc,psuedo_r2,model_fit)
+ 
+     # summary table
+     table <- tidy(beta)
+     table$num <- n
+     table$geography <- r
+     table$panel <- p
+     df_table_region <- rbind(df_table_region,table)
+     
+     # predict - country level change
+     yhat <- prediction(beta, data = df_new_data_yhat, calculate_se = TRUE)
+     yhat <- yhat %>%
+       select(fitted, se.fitted) %>%
+       rename(fit = fitted) %>%
+       mutate(lwr = fit - 1.96*se.fitted,
+              upr = fit + 1.96*se.fitted) %>%
+       select(-se.fitted)
+     yhat <- cbind(df_new_data_yhat,yhat)
+     yhat$num <- n
+     yhat$geography <- r
+     yhat$panel <- p
+     df_yhat_region <- rbind(df_yhat_region,yhat)
+     
+     # margins
+     mfx <- summary(margins(beta,
+                            design = my_svy
+     ))
+     mfx$num <- n
+     mfx$geography <- r
+     mfx$panel <- p
+     df_mfx_region <- rbind(df_mfx_region,mfx)
+   }  
+ }
[1] "Continental"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Eastern"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Southern"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Nordic"
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] "Anglophone"
[1] 2008
[1] 2009
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] 2010
[1] 2011
There were 50 or more warnings (use warnings() to see the first 50)
> 
> rm(beta,table,yhat,mfx,df_region,r,region,p,panel,df_panel,df_new_data_yhat)
> 
> # Country
> country <- unique(df_eu_silc$country)
> df_table_country = data.frame() # output
> df_yhat_country = data.frame() # predict
> df_mfx_country = data.frame() # mfx
> df_model_fit_country <- data.frame(auc= numeric(0), psuedo_r2= integer(0))
> for(c in country) {
+   df_country <- filter(df_eu_silc, country == c)
+   print(c)
+   
+   panel <- unique(df_country$panel)
+   for(p in panel) {
+     df_panel <- filter(df_country, panel == p)
+     print(p)
+     
+     df_new_data_yhat <- data.frame(
+       unique(
+         data.frame(
+           male = "0",
+           age_cat = "2",
+           edu_cat = "2")), 
+       row.names = NULL)
+     
+     my_svy <- svydesign(data = df_panel, 
+                         ids = ~1, # no clusters 
+                         weights =~ weight_long_2)
+     beta <- svyglm(ftc_c_0 ~ male + age_cat + edu_cat, my_svy, family = "binomial")
+     
+     # model fit
+     # psuedo_r2 = pR2(beta)["McFadden"]
+     # df_panel$yhat <- predict(beta,type="response")
+     # auc <- roc(df_panel$ftc_c_0, df_panel$yhat)$auc
+     # model_fit <- data.frame(cbind(auc,psuedo_r2))
+     # rownames(model_fit) <- NULL
+     # model_fit$num <- n
+     # model_fit$geography <- c
+     # model_fit$panel <- p
+     # df_model_fit_country <- rbind(df_model_fit_country,model_fit)
+     # rm(auc,psuedo_r2,model_fit)
+ 
+     # summary table
+     table <- tidy(beta)
+     table$num <- n
+     table$geography <- c
+     table$panel <- p
+     df_table_country <- rbind(df_table_country,table)
+     
+     # predict - country level change
+     yhat <- prediction(beta, data = df_new_data_yhat, calculate_se = TRUE)
+     yhat <- yhat %>%
+       select(fitted, se.fitted) %>%
+       rename(fit = fitted) %>%
+       mutate(lwr = fit - 1.96*se.fitted,
+              upr = fit + 1.96*se.fitted) %>%
+       select(-se.fitted)
+     yhat <- cbind(df_new_data_yhat,yhat)
+     yhat$num <- n
+     yhat$geography <- c
+     yhat$panel <- p
+     df_yhat_country <- rbind(df_yhat_country,yhat)
+ 
+     # margins
+     mfx <- summary(margins(beta,
+                            design = my_svy
+     ))
+     mfx$num <- n
+     mfx$geography <- c
+     mfx$panel <- p
+     df_mfx_country <- rbind(df_mfx_country,mfx)
+   }
+ }
[1] "Austria"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Belgium"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Bulgaria"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Croatia"
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Cyprus"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Czechia"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Denmark"
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Estonia"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Finland"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "France"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Germany"
[1] 2018
[1] 2019
[1] "Greece"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Hungary"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Iceland"
[1] 2008
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] "Ireland"
[1] 2008
[1] 2009
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Italy"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Latvia"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Lithuania"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Luxembourg"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Malta"
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Netherlands"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Norway"
[1] 2008
[1] 2009
[1] 2018
[1] "Poland"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Portugal"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Romania"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Serbia"
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Slovakia"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2018
[1] "Slovenia"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Spain"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Sweden"
[1] 2008
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] 2019
[1] "Switzerland"
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
[1] "United Kingdom"
[1] 2009
[1] 2010
[1] 2011
[1] 2012
[1] 2013
[1] 2014
[1] 2015
[1] 2016
[1] 2017
[1] 2018
There were 50 or more warnings (use warnings() to see the first 50)
> 
> rm(beta,table,yhat,mfx,df_country,c,country,df_panel,p,panel,df_new_data_yhat)
> 
> # Save --------------------------------------------------------------
> 
> saveRDS(df_yhat_eu, file = paste0(results, "df_yhat_glm_ever_eu_wt.rds"))
> saveRDS(df_yhat_region, file = paste0(results, "df_yhat_glm_ever_region_wt.rds"))
> saveRDS(df_yhat_country, file = paste0(results, "df_yhat_glm_ever_country_wt.rds"))
> 
> saveRDS(df_table_eu, file = paste0(results, "df_table_glm_ever_eu_wt.rds"))
> saveRDS(df_table_region, file = paste0(results, "df_table_glm_ever_region_wt.rds"))
> saveRDS(df_table_country, file = paste0(results, "df_table_glm_ever_country_wt.rds"))
> 
> saveRDS(df_mfx_eu, file = paste0(results, "df_mfx_glm_ever_eu_wt.rds"))
> saveRDS(df_mfx_region, file = paste0(results, "df_mfx_glm_ever_region_wt.rds"))
> saveRDS(df_mfx_country, file = paste0(results, "df_mfx_glm_ever_country_wt.rds"))
> 
> proc.time()
   user  system elapsed 
336.900  50.400 394.393 
